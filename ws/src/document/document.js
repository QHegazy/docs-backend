"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v3.19.6
// source: document.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewDocumentClientImpl = exports.NewDocumentServiceName = exports.Error = exports.DocumentResponse = exports.DocumentRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "document";
function createBaseDocumentRequest() {
    return { title: "" };
}
exports.DocumentRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDocumentRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { title: isSet(object.title) ? globalThis.String(object.title) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        return obj;
    },
    create: function (base) {
        return exports.DocumentRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDocumentRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDocumentResponse() {
    return { documentId: "", error: undefined };
}
exports.DocumentResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.documentId !== "") {
            writer.uint32(10).string(message.documentId);
        }
        if (message.error !== undefined) {
            exports.Error.encode(message.error, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDocumentResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.documentId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.error = exports.Error.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            documentId: isSet(object.documentId) ? globalThis.String(object.documentId) : "",
            error: isSet(object.error) ? exports.Error.fromJSON(object.error) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.documentId !== "") {
            obj.documentId = message.documentId;
        }
        if (message.error !== undefined) {
            obj.error = exports.Error.toJSON(message.error);
        }
        return obj;
    },
    create: function (base) {
        return exports.DocumentResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDocumentResponse();
        message.documentId = (_a = object.documentId) !== null && _a !== void 0 ? _a : "";
        message.error = (object.error !== undefined && object.error !== null) ? exports.Error.fromPartial(object.error) : undefined;
        return message;
    },
};
function createBaseError() {
    return { code: 0, message: "" };
}
exports.Error = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseError();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create: function (base) {
        return exports.Error.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseError();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
exports.NewDocumentServiceName = "document.NewDocument";
var NewDocumentClientImpl = /** @class */ (function () {
    function NewDocumentClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.NewDocumentServiceName;
        this.rpc = rpc;
        this.InsertDocument = this.InsertDocument.bind(this);
    }
    NewDocumentClientImpl.prototype.InsertDocument = function (request) {
        var data = exports.DocumentRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "InsertDocument", data);
        return promise.then(function (data) { return exports.DocumentResponse.decode(new wire_1.BinaryReader(data)); });
    };
    return NewDocumentClientImpl;
}());
exports.NewDocumentClientImpl = NewDocumentClientImpl;
function isSet(value) {
    return value !== null && value !== undefined;
}
